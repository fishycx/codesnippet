<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>ssFloatView</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>    init() {
        super.init(frame: CGRect(x: 0, y: 0, width: ScreenWidth, height: ScreenHeight))
        setSubviews()
        addUIConstraints()
        let gesture = UITapGestureRecognizer(target: self, action: #selector(hiddenBtnHandle))
        glassView.addGestureRecognizer(gesture)
        backView.frame = CGRect(x: 0, y: ScreenHeight, width: ScreenWidth, height: contentView.viewHeight)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    

    fileprivate func setSubviews() {
        addSubview(glassView)
        addSubview(backView)
        backView.addSubview(contentView)
        backView.addSubview(closeBtn)
    }
    
    fileprivate func addUIConstraints() {
        glassView.snp.makeConstraints { (make) in
            make.edges.equalTo(0)
        }
        
        contentView.snp.makeConstraints { (make) in
            make.edges.equalTo(0)
        }
        
        closeBtn.snp.makeConstraints { (make) in
            make.right.equalTo(-BBFloat(12))
            make.top.equalTo(BBFloat(12))
            make.height.width.equalTo(BBFloat(14))
        }
    }
    
    func showInWindow() {
        UIApplication.shared.keyWindow?.addSubview(self)
        self.contentView.updateUI()
        self.glassView.backgroundColor = UIColor.clear
        let height = self.contentView.viewHeight
        self.backView.frame = CGRect(x: 0, y: ScreenHeight, width: ScreenWidth, height: height)
        UIView.animate(withDuration: 0.2, animations: {
            self.glassView.backgroundColor = UIColor(red: 0, green: 0, blue: 0, alpha: 0.5)
            self.backView.frame = CGRect(x: 0, y: ScreenHeight - self.backView.height, width: ScreenWidth, height: height)
        })
    }

    
    // Event Rensponse
    @objc func hiddenBtnHandle() {
        hiddenFloatingView()
    }
    
    var glassView: UIView = {
        let glassView = UIView()
        return glassView
    }()
    
    var backView: UIView = {
        let backView = BBCustomView()
        backView.backgroundColor = UIColor.white
        backView.corner = BBFloat(10)
        backView.rounds = [.topLeft, .topRight]
        return backView
    }()
    
    var contentView:SKUContentView = {
        let view = SKUContentView()
        return view
    }()
        
    fileprivate lazy var closeBtn:UIButton = {
        let btn = UIButton(type: .custom)
        btn.addTarget(self, action: #selector(hiddenBtnHandle), for: UIControl.Event.touchUpInside)
        btn.setBackgroundImage(UIImage(named: "shareClose"), for: UIControl.State.normal)
        return btn
    }()

</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>263BF46B-4F44-4144-A630-EBD7C49BDC90</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>ssFloatView</string>
	<key>IDECodeSnippetTitle</key>
	<string>ssFloatView</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
